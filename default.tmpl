### redirect insecure request to secure
server {
  listen 80;
  server_name _;

  add_header Vary Upgrade-Insecure-Requests;
  return 307 https://$host$request_uri;
}

### kong api
server {
    listen 80;
    server_name api.*;

    location / {
        proxy_pass http://{{ .Env.KONG_HOST }}:{{ .Env.KONG_PORT }};
        proxy_set_header    Host            $host;
        proxy_set_header    X-Real-IP       $remote_addr;
        proxy_set_header    X-Forwarded-for $remote_addr;
        port_in_redirect off;
        proxy_connect_timeout 300;
    }
}
{{if ne .Env.ENV "PROD"}}
server {
    server_name  adminapi.*;
    location / {
        proxy_pass http://{{ .Env.KONG_ADMIN_HOST }}:{{ .Env.KONG_ADMIN_PORT }};
        proxy_set_header    Host            $host;
        proxy_set_header    X-Real-IP       $remote_addr;
        proxy_set_header    X-Forwarded-for $remote_addr;
        port_in_redirect off;
        proxy_connect_timeout 300;
    }
}
{{end}}
### lua configurations for dynamic ssl
lua_package_path "/etc/lua-resty-core/lib/?.lua;;";
lua_shared_dict ssls 2m;

server {
    listen	443	ssl http2;
    server_name _;
    root {{ .Env.ROOT_DIR }};

    ### SSL CONF
    ssl on;
    ssl_certificate /ssl/server.crt;
    ssl_certificate_key /ssl/server.key;
    ssl_dhparam	/ssl/dhparam.pem;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    add_header	Strict-Transport-Security "max-age=31536000";
    ssl_protocols TLSv1	TLSv1.1	TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_session_timeout 30m;
    ssl_session_cache shared:SSL:50m;
    ssl_certificate_by_lua_block {
        local pgmoon = require("pgmoon")
        local base64 = require("base64")

        local pg = pgmoon.new({
            host = "{{ .Env.PG_HOST }}",
            port = "{{ default .Env.PG_PORT "5432" }}",
            database = "{{ .Env.PG_DB }}",
            user = "{{ .Env.PG_USER }}",
            password = "{{ .Env.PG_PASS }}"
        })

        assert(pg:connect())

        local ssl = require "ngx.ssl"
        local server_name = ssl.server_name()
        ssl.clear_certs()
        if server_name == nil then
            server_name = "default"
        end

        local cert = ngx.shared.ssls:get(server_name)
        if cert == nil then
            local sql_res = assert(pg:query("SELECT s1.ssl_cert,s1.ssl_priv FROM settings s1, site s2 WHERE s1.site = CAST (s2.id AS VARCHAR) AND s2.domain=" ..
                pg:escape_literal(server_name) .. " LIMIT 1;"))

            if sql_res ~= nil and sql_res[1] ~= nil then
                cert = {crt = base64.decode(sql_res[1]["ssl_cert"]), key = base64.decode(sql_res[1]["ssl_priv"])}
                ngx.shared.ssls:set(server_name, cert)
            end
        end
        if cert ~= nil then
            ssl.set_der_cert(cert.crt)
            ssl.set_der_priv_key(cert.key)
        end
    }
    ### static files
    location ~*  \.(jpg|jpeg|png|gif|ico|css|js|json|xml|html|woff|woff2|ttf|otf|svg|eot)$ {
        add_header 'Cache-Control' 'public';
        expires 365d;
        access_log off;
        log_not_found off;
    }

    ### php
    location / {
        rewrite ^(.*)$ /app.php/$1 last;
    }

    location ~ ^/app\.php(/|$) {
        ### ENABLE CORS
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        add_header 'Access-Control-Allow-Origin' '*' 'always';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' 'always';
        add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' 'always';

        ### SECURITY HEADERS
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1;	mode=block";
        add_header X-Content-Type-Options "nosniff";

    {{if eq .Env.ENV "PROD"}}
        ### CACHE
        set $skip_cache 1;
        if ($request_uri ~* '(/login)') { set $skip_cache 0; }
        add_header	X-Cache-Status $upstream_cache_status;
        fastcgi_cache phpfpmcache;
        fastcgi_cache_bypass $skip_cache;
        fastcgi_no_cache $skip_cache;
    {{end}}

        fastcgi_pass {{ .Env.PHP_HOST }}:{{ .Env.PHP_PORT }};
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;

        ### add geo data to $_SERVER array
        fastcgi_param COUNTRY_CODE $geoip2_data_country_code;
        fastcgi_param COUNTRY_NAME $geoip2_data_country_name;

        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param HTTPS on;

        proxy_set_header    Host            $host;
        proxy_set_header    X-Real-IP       $remote_addr;
        proxy_set_header    X-Forwarded-for $remote_addr;
    }
}
