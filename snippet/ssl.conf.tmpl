ssl on;
ssl_certificate /ssl/server.crt;
ssl_certificate_key /ssl/server.key;
ssl_dhparam	/ssl/dhparam.pem;
ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
add_header	Strict-Transport-Security "max-age=31536000";
ssl_protocols TLSv1	TLSv1.1	TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_session_timeout 30m;
ssl_session_cache shared:SSL:50m;
ssl_certificate_by_lua_block {
    local pgmoon = require("pgmoon")
    local base64 = require("base64")

    local pg = pgmoon.new({
        host = "{{ .Env.PG_HOST }}",
        port = "{{ default .Env.PG_PORT "5432" }}",
        database = "{{ .Env.PG_DB }}",
        user = "{{ .Env.PG_USER }}",
        password = "{{ .Env.PG_PASS }}"
    })

    assert(pg:connect())

    local ssl = require "ngx.ssl"
    local server_name = ssl.server_name()
    ssl.clear_certs()
    if server_name == nil then
        server_name = "default"
    end

    local ssl_crt = ngx.shared.ssls:get(server_name .. "crt")
    local ssl_priv = ngx.shared.ssls:get(server_name .. "priv")
    if ssl_crt == nil or ssl_priv == nil then
        local sql_res = assert(pg:query("SELECT s1.ssl_cert,s1.ssl_priv FROM settings s1, site s2 WHERE s1.site = CAST (s2.id AS VARCHAR) AND s2.domain=" ..
            pg:escape_literal(server_name) .. " LIMIT 1;"))

        if sql_res ~= nil and sql_res[1] ~= nil and sql_res[1]["ssl_cert"] ~= nil and sql_res[1]["ssl_priv"] ~= nil then
            ssl_crt = base64.decode(sql_res[1]["ssl_cert"])
            ssl_priv = base64.decode(sql_res[1]["ssl_priv"])

            ngx.shared.ssls:set(server_name .. "crt", ssl_crt)
            ngx.shared.ssls:set(server_name .. "priv", ssl_priv)
        end
    end
    if ssl_crt ~= nil and ssl_priv ~= nil then
        ssl.set_der_cert(ssl_crt)
        ssl.set_der_priv_key(ssl_priv)
    end
}
